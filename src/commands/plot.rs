pub mod cohort;
pub mod sample;

use clap::Command;

use crate::{add_verbosity_args, lib::qc::results::Results};

use self::sample::{
    gc_content_distribution::GCContentDistributionPlot,
    quality_score_distribution::QualityScoreDistributionPlot,
};

//===============//
// Command setup //
//===============//

pub fn get_command<'a>() -> Command<'a> {
    Command::new("plot")
        .about("Produces plots for data generated by `ngs qc`.")
        .subcommand_required(true)
        .subcommand(add_verbosity_args(cohort::get_command()))
        .subcommand(add_verbosity_args(sample::get_command()))
}

//===========//
// Plot kind //
//===========//

#[derive(PartialEq)]
pub enum PlotKind {
    Sample,
    Cohort,
}

//============//
// Plot trait //
//============//

pub trait Plot {
    fn name(&self) -> &'static str;
    fn kind(&self) -> PlotKind;
    fn filename(&self) -> &'static str;
    fn generate(&self, data: &Results) -> anyhow::Result<plotly::Plot>;
}

//=========================//
// Get all supported plots //
//=========================//

pub fn get_all_plots() -> Vec<Box<dyn Plot>> {
    vec![
        Box::new(QualityScoreDistributionPlot),
        Box::new(GCContentDistributionPlot),
    ]
}
